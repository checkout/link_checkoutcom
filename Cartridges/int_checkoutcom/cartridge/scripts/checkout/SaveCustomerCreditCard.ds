/**
 * Pipeline Implementation of save function
 *
 * @input PaymentInstrument : dw.customer.CustomerPaymentInstrument
 * @input CreditCardFormFields : dw.web.FormGroup
 */
function execute (pdict) {
	return save(pdict);
}

/**
 * This script attempts to add the credit card contained in the given
 * credit card form group to the customer payment instrument.
 *
 * @param {Object} params - New credit card data
 * @param {dw.customer.CustomerPaymentInstrument} params.PaymentInstrument - credit card object
 * @param {dw.web.FormGroup} params.CreditCardFormFields - new credit card form
 */
var PaymentInstrument = require('dw/order/PaymentInstrument');
var Logger = require('dw/system/Logger');
var dwOrderPaymentInstrument = require('dw/order/PaymentInstrument');
var PaymentMgr = require('dw/order/PaymentMgr');
var HookMgr = require('dw/system/HookMgr');

function save(params) {
    var paymentInstr = params.PaymentInstrument;
    var creditCardFields = params.CreditCardFormFields;

    if( !paymentInstr ) {
        // no payment instrument given
        Logger.debug("No customer payment instrument given to store credit card data");
        return PIPELET_ERROR;
    }

    if( !PaymentInstrument.METHOD_CREDIT_CARD.equals(paymentInstr.paymentMethod) ) {
        // given payment instrument not a credit card
        Logger.debug("Customer payment instrument is of type {0}, type {1} required.", paymentInstr.paymentMethod, PaymentInstrument.METHOD_CREDIT_CARD);
        return PIPELET_ERROR;
    }

    // copy the credit card details to the payment instrument
    paymentInstr.setCreditCardHolder( creditCardFields.owner.value );
    paymentInstr.setCreditCardNumber( creditCardFields.number.value.replace(/ /g, "") );
    paymentInstr.setCreditCardExpirationMonth( creditCardFields.expiration.month.value );
    paymentInstr.setCreditCardExpirationYear( creditCardFields.expiration.year.value );
    paymentInstr.setCreditCardType( creditCardFields.type.value );

    var paymentData = {
        cardNumber: creditCardFields.number.value.replace(/ /g, ""),
        expirationMonth: creditCardFields.expiration.month.value,
        expirationYear: creditCardFields.expiration.year.value,
        name: creditCardFields.owner.value,
        email: customer.profile.email
    };
    var processor = PaymentMgr.getPaymentMethod(dwOrderPaymentInstrument.METHOD_CREDIT_CARD).getPaymentProcessor();
    if (HookMgr.hasHook('app.payment.processor.' + processor.ID)) {
        var token = HookMgr.callHook('app.payment.processor.' + processor.ID, 'createToken', paymentData);
        paymentInstr.setCreditCardToken(token);
    }

    return PIPELET_NEXT;
}

module.exports = {
    save: save,
};
